; MIT License
;
; Copyright (c) 2023 R.F. van Ee
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:

; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.

; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

.program counter

.define push_it do_push

    set y, 0 ; scratch y is the (32-bit) counter
    pull ; pull main loop start address from fifo
    out x, 32 ; keep that in scratch x
.wrap_target
    jmp y--, after_y__ ; count down, ignore zero crossing
after_y__:
    pull noblock
    out pc, 32 ; jmp to either x (should be wrap_target)
               ; or new fifo value (should be do_push)
do_push:
    jmp y--, after_second_y__ ; 3 extra instructions for push
                              ; equals 1 extra count
after_second_y__:
    mov isr, ~y ; return -y, since we counted down
    push
.wrap

% c-sdk {
static inline void counter_program_init(PIO pio, uint sm, uint offset) {
	pio_sm_config c = counter_program_get_default_config(offset);
	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);

  // Put main loop start address into fifo
  pio_sm_put(pio, sm, counter_wrap_target + offset);
}

static inline uint64_t retrieve_counter(PIO pio, uint sm, uint offset) {
  static uint64_t counter;

  // Retrieve new (32 bit) counter value
  pio_sm_put(pio, sm, counter_push_it + offset);
  uint32_t new_counter_lo = pio_sm_get_blocking(pio, sm);

  // Handle overflow situation
  uint32_t old_counter_lo = static_cast<uint32_t>(counter);
  if(new_counter_lo < old_counter_lo) {
    counter += 0x0000000100000000;
  }

  // Update lower part of counter
  counter = (counter & 0xFFFFFFFF00000000) | new_counter_lo;

  return counter;
}
%}